# Specifies the version of the Docker Compose file format.
version: '3.8'

# 'services' is where we define all the containers that make up our application.
services:

  # 1. The Database Service (MySQL)
  db:
    # Use the official MySQL 8.0 image. Docker will pull it from Docker Hub.
    image: mysql:8.0
    # We give the container a specific name for easy identification.
    container_name: mysql_db
    # 'restart: always' ensures the container will restart automatically if it crashes.
    restart: always
    # 'environment' is where we set environment variables needed by the MySQL container.
    # These are used by the MySQL image to set up the database.
    environment:
      MYSQL_ROOT_PASSWORD: myrootpassword # Sets the root password.
      MYSQL_DATABASE: mydatabase          # Creates an empty database named 'mydatabase'.
      MYSQL_USER: myuser                  # Creates a user.
      MYSQL_PASSWORD: mypassword          # Sets the password for that user.
    # 'volumes' is for persisting data and providing files.
    volumes:
      # This is a NAMED VOLUME. Docker manages it.
      # It persists the database data in '/var/lib/mysql' even if the container is removed.
      - db_data:/var/lib/mysql
      # This is a BIND MOUNT. It maps a file from our host into the container.
      # The MySQL image will automatically run any .sql scripts in this directory upon first startup.
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    # We don't need to expose ports for the DB to the outside world.
    # The 'web' service can reach it through the internal Docker network.

  # 2. The Web Server Service (Apache + PHP)
  web:
    # 'build: .' tells Docker Compose to look for a Dockerfile in the current directory
    # and build a custom image from it.
    build: .
    # Give the container a name.
    container_name: php_apache_web
    # 'restart: always' for reliability.
    restart: always
    # 'ports' maps a port from the host machine to a port inside the container.
    # Format is "HOST_PORT:CONTAINER_PORT"
    # We can access our app on http://localhost:8080 on our VM.
    ports:
      - "8080:80"
    # 'volumes' to map our application source code into the container's web root.
    volumes:
      # This BIND MOUNT links our 'src' folder on the host to '/var/www/html' in the container.
      # This means any changes you make to src/index.php will instantly reflect in the running container.
      - ./src:/var/www/html
    # 'depends_on' tells Compose that the 'web' service should not start until
    # the 'db' service is up and running. This prevents connection errors.
    depends_on:
      - db

# 'volumes' at the top level is where we declare our named volumes.
# This makes them easier to manage.
volumes:
  db_data:
